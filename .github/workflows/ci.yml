name: CI - Build Lambdas & Terraform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build Lambda artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Make packaging script executable
        run: chmod +x ./deploy_lambdas.sh

      - name: Build lambda zips
        run: ./deploy_lambdas.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TF_BACKEND_REGION }}

      - name: Upload lambda zips to S3
        env:
          S3_BUCKET: ${{ secrets.LAMBDA_ARTIFACT_BUCKET }}
        run: |
          set -euo pipefail
          # Use an ISO timestamp plus run id to create a versioned prefix
          TS=$(date -u +%Y%m%dT%H%M%SZ)
          S3_PREFIX="artifacts/${TS}-${GITHUB_RUN_ID}"
          echo "Uploading lambda zips to s3://${S3_BUCKET}/${S3_PREFIX}/"
          for f in terraform/lambda/*.zip; do
            [ -f "$f" ] || continue
            key="${S3_PREFIX}/$(basename "$f")"
            echo "Uploading $f -> s3://${S3_BUCKET}/${key}"
            aws s3 cp "$f" "s3://${S3_BUCKET}/${key}"
          done
          echo "s3://${S3_BUCKET}/${S3_PREFIX}/" > artifact_prefix.txt

      - name: Upload artifact prefix
        uses: actions/upload-artifact@v4
        with:
          name: artifact-prefix
          path: artifact_prefix.txt

  terraform:
    name: Terraform validate & plan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact prefix
        uses: actions/download-artifact@v4
        with:
          name: artifact-prefix

      - name: Read artifact prefix
        id: read_prefix
        run: |
          prefix=$(cat artifact_prefix.txt)
          echo "prefix=$prefix" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.TF_BACKEND_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Create backend config (local)
        env:
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_KEY:    ${{ secrets.TF_BACKEND_KEY }}
          TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
          TF_BACKEND_DDB:    ${{ secrets.TF_BACKEND_DDB }}
        run: |
          cat > terraform/backend.tf.local <<EOF
          bucket = "${TF_BACKEND_BUCKET}"
          key    = "${TF_BACKEND_KEY}"
          region = "${TF_BACKEND_REGION}"
          dynamodb_table = "${TF_BACKEND_DDB}"
          encrypt = true
          EOF

      - name: Write artifact locations for Terraform
        env:
          ARTIFACT_PREFIX: ${{ steps.read_prefix.outputs.prefix }}
          S3_BUCKET: ${{ secrets.LAMBDA_ARTIFACT_BUCKET }}
        run: |
          # Create a small tfvars file mapping function -> s3 key
          cat > terraform/lambda_artifacts.tfvars <<EOF
          reddit_collector_zip = "s3://${S3_BUCKET}/${ARTIFACT_PREFIX}reddit_collector.zip"
          sentiment_analyzer_zip = "s3://${S3_BUCKET}/${ARTIFACT_PREFIX}sentiment_analyzer.zip"
          EOF

      - name: Terraform init
        run: terraform init -backend-config=terraform/backend.tf.local

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan -out=tfplan

      - name: Upload terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
